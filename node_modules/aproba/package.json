{
  "_args": [
    [
      {
        "raw": "aproba@^2.0.0",
        "scope": null,
        "escapedName": "aproba",
        "name": "aproba",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "D:\\Desktop\\NovoHackerBot\\node_modules\\libnpmaccess"
    ]
  ],
  "_from": "aproba@>=2.0.0 <3.0.0",
  "_id": "aproba@2.0.0",
  "_inCache": true,
  "_location": "/aproba",
  "_nodeVersion": "9.11.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/aproba_2.0.0_1527024586301_0.30200366760036923"
  },
  "_npmUser": {
    "name": "iarna",
    "email": "me@re-becca.org"
  },
  "_npmVersion": "6.1.0-next.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "aproba@^2.0.0",
    "scope": null,
    "escapedName": "aproba",
    "name": "aproba",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/libnpmaccess",
    "/libnpmhook",
    "/libnpmorg",
    "/libnpmpublish",
    "/libnpmteam",
    "/npm-profile"
  ],
  "_resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
  "_shasum": "52520b8ae5b569215b354efc0caa3fe1e45a8adc",
  "_shrinkwrap": null,
  "_spec": "aproba@^2.0.0",
  "_where": "D:\\Desktop\\NovoHackerBot\\node_modules\\libnpmaccess",
  "author": {
    "name": "Rebecca Turner",
    "email": "me@re-becca.org"
  },
  "bugs": {
    "url": "https://github.com/iarna/aproba/issues"
  },
  "dependencies": {},
  "description": "A ridiculously light-weight argument validator (now browser friendly)",
  "devDependencies": {
    "standard": "^11.0.1",
    "tap": "^12.0.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ==",
    "shasum": "52520b8ae5b569215b354efc0caa3fe1e45a8adc",
    "tarball": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
    "fileCount": 5,
    "unpackedSize": 8047,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbBIvMCRA9TVsSAnZWagAAAIcP/1qup9qwIgKp+SCSf0rR\nsHJO1GAdECnBCghAqMfUM7biv6tZOP3RbZkQKhVA8YU+Fl80BgFQ4ZiKa1SU\nazt54yur3sb3Tm80lyR4EZ3v3pBq0Gbzp/gVnJgQuvAoTU4bAba/CDXmj8Df\npmRUZNSPqjJK4zD5tGTfWd3sfY6lgQC/T401z0WafF/T82pE6wpJPMLyds/H\nnw8p5rbHwLNbdYihX/Gv8G4AdHuFtRRFOi1vDky1NUrs8k32N21EmlOaNC4y\nJ7x9VsWNZTqcmb8zwp3fQv+/IGdY36hZTFlF2Ig2u2UaapzL9u2vFEZAOmZ9\n6eGjz8ZYepa11/QuOr1sZJM9xQzJNqT89VsB7gZMci4kJ3pk8e8Za1vJC2Ub\nx7bJSKTsCMUclDjZBLpPv0QczW61os6kIWoZLzEs+MIESCBU8GVX4pNjEaoB\nGFDyMTYmu93c6+23FxTVPjofFI7Bt3tJ55l4v5rX5uNiQhlkVHw71kztYQ9r\nv2Uq5tdeaohrzfRUhNVWxwBup6+zDBJP4fS6G+2l7KPtx1Ylkm9xsT8P6LOm\nW+6426jArfwiygOZgNewZDQHhsvbx2PmpWwZt/+WJpW+hPtdAAxBJCD96NFJ\nJqIwaDaJ7K6gSkr56hhwu2BMOptk8WtcD3w0NTsMUhJqy4tJPzeqtznToSD1\n7dh9\r\n=/XJn\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "f87074e0c9b1afbd6ba1b2eab4736433d29d85f8",
  "homepage": "https://github.com/iarna/aproba",
  "keywords": [
    "argument",
    "validate"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "iarna",
      "email": "me@re-becca.org"
    }
  ],
  "name": "aproba",
  "optionalDependencies": {},
  "readme": "aproba\n======\n\nA ridiculously light-weight function argument validator\n\n```\nvar validate = require(\"aproba\")\n\nfunction myfunc(a, b, c) {\n  // `a` must be a string, `b` a number, `c` a function\n  validate('SNF', arguments) // [a,b,c] is also valid\n}\n\nmyfunc('test', 23, function () {}) // ok\nmyfunc(123, 23, function () {}) // type error\nmyfunc('test', 23) // missing arg error\nmyfunc('test', 23, function () {}, true) // too many args error\n\n```\n\nValid types are:\n\n| type | description\n| :--: | :----------\n| *    | matches any type\n| A    | `Array.isArray` OR an `arguments` object\n| S    | typeof == string\n| N    | typeof == number\n| F    | typeof == function\n| O    | typeof == object and not type A and not type E\n| B    | typeof == boolean\n| E    | `instanceof Error` OR `null` **(special: see below)**\n| Z    | == `null`\n\nValidation failures throw one of three exception types, distinguished by a\n`code` property of `EMISSINGARG`, `EINVALIDTYPE` or `ETOOMANYARGS`.\n\nIf you pass in an invalid type then it will throw with a code of\n`EUNKNOWNTYPE`.\n\nIf an **error** argument is found and is not null then the remaining\narguments are optional.  That is, if you say `ESO` then that's like using a\nnon-magical `E` in: `E|ESO|ZSO`.\n\n### But I have optional arguments?!\n\nYou can provide more than one signature by separating them with pipes `|`.\nIf any signature matches the arguments then they'll be considered valid.\n\nSo for example, say you wanted to write a signature for\n`fs.createWriteStream`.  The docs for it describe it thusly:\n\n```\nfs.createWriteStream(path[, options])\n```\n\nThis would be a signature of `SO|S`.  That is, a string and and object, or\njust a string.\n\nNow, if you read the full `fs` docs, you'll see that actually path can ALSO\nbe a buffer.  And options can be a string, that is:\n```\npath <String> | <Buffer>\noptions <String> | <Object>\n```\n\nTo reproduce this you have to fully enumerate all of the possible\ncombinations and that implies a signature of `SO|SS|OO|OS|S|O`.  The\nawkwardness is a feature: It reminds you of the complexity you're adding to\nyour API when you do this sort of thing.\n\n\n### Browser support\n\nThis has no dependencies and should work in browsers, though you'll have\nnoisier stack traces.\n\n### Why this exists\n\nI wanted a very simple argument validator. It needed to do two things:\n\n1. Be more concise and easier to use than assertions\n\n2. Not encourage an infinite bikeshed of DSLs\n\nThis is why types are specified by a single character and there's no such\nthing as an optional argument. \n\nThis is not intended to validate user data. This is specifically about\nasserting the interface of your functions.\n\nIf you need greater validation, I encourage you to write them by hand or\nlook elsewhere.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/iarna/aproba.git"
  },
  "scripts": {
    "pretest": "standard",
    "test": "tap --100 -J test/*.js"
  },
  "version": "2.0.0"
}
