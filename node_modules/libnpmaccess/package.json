{
  "_args": [
    [
      {
        "raw": "libnpmaccess@^2.0.0",
        "scope": null,
        "escapedName": "libnpmaccess",
        "name": "libnpmaccess",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "D:\\Desktop\\NovoHackerBot\\node_modules\\libnpm"
    ]
  ],
  "_from": "libnpmaccess@>=2.0.0 <3.0.0",
  "_id": "libnpmaccess@2.0.1",
  "_inCache": true,
  "_location": "/libnpmaccess",
  "_nodeVersion": "10.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/libnpmaccess_2.0.1_1535070305445_0.1219766989667157"
  },
  "_npmUser": {
    "name": "zkat",
    "email": "npm@zkat.tech"
  },
  "_npmVersion": "6.4.1-next.0",
  "_phantomChildren": {
    "pump": "3.0.0"
  },
  "_requested": {
    "raw": "libnpmaccess@^2.0.0",
    "scope": null,
    "escapedName": "libnpmaccess",
    "name": "libnpmaccess",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/libnpm"
  ],
  "_resolved": "https://registry.npmjs.org/libnpmaccess/-/libnpmaccess-2.0.1.tgz",
  "_shasum": "3b49b66ddc3c27c1f66fd7d70e77cebd74b84aa7",
  "_shrinkwrap": null,
  "_spec": "libnpmaccess@^2.0.0",
  "_where": "D:\\Desktop\\NovoHackerBot\\node_modules\\libnpm",
  "author": {
    "name": "Kat MarchÃ¡n",
    "email": "kzm@zkat.tech"
  },
  "bugs": {
    "url": "https://github.com/npm/libnpmaccess/issues"
  },
  "dependencies": {
    "aproba": "^2.0.0",
    "get-stream": "^4.0.0",
    "npm-package-arg": "^6.1.0",
    "npm-registry-fetch": "^3.8.0"
  },
  "description": "programmatic library for `npm access` commands",
  "devDependencies": {
    "nock": "^9.6.1",
    "standard": "*",
    "standard-version": "*",
    "tap": "*",
    "weallbehave": "*",
    "weallcontribute": "*"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-WJRlA7YGGCBK6zubJ8eajD7Wm6SaywiR0jnMjwp8QBwt1QxQOY+CCKpERw30opPkShjoesBLzQJ9Wf3MpXGR/A==",
    "shasum": "3b49b66ddc3c27c1f66fd7d70e77cebd74b84aa7",
    "tarball": "https://registry.npmjs.org/libnpmaccess/-/libnpmaccess-2.0.1.tgz",
    "fileCount": 12,
    "unpackedSize": 61920,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbf1BiCRA9TVsSAnZWagAARZAP/0Px6pti4gPpMUEOPFKD\nqXhXJnFKKuKn+6/gK+STGAQXjfVpefPj7nW1IsTdkl77U3QtrgyM85yU0fbJ\nNlZgeMXtl6hlrhXdYzdXl8Jv2VhUMnfhlfU/EbQpfnb/1zHzzdI8WZr0m63n\nNuU5/v9NDfZ1ziECbWPqnuXSGRkf6jvTrX6XLn5zg4eWTmgx4kp59LJfoB/4\n4803ugk4BZxRYkSbfiXdGPcrqYL7mUsvbZShXBa/9hFdq+GIQYt+y3crd79u\nT2D6rj3zB80lnUS1iDQVPfWcDcx/sGzDfIr4oJ7tp11OoC0fV9MBBD4raS9x\n1uELhuVwOHdrjLgiDp+dV7fe9ARRbDpTsmG+rIeQHpsY1jUWKrFSu6KhbUDD\nBTut9gNM0XB8Jy0Bk0ogungCZkLmNC9i97aRXUf2RKaKC833dfrN+J782Cqq\nLVbVxPx9t6+OCDB4IwKhT7QEMW3VIoDM3zJr9Y7rzaqw5f3JgzvPrMQMfifK\njzgHK8QQiueM0O/XB0dvbtfo9opIabeTVovaDQbQMNintmef4A0yCI7dHcY4\nIsMPhL+SUiT6JMLIAOZqxtKi3gBkFYHyfpO+UaFGD7vs7/X9jQ+QXdkyWLtO\nGTZcZK6GPcaQtSLACRDNu+s13jDxRMwjuKOP9ReucOpD/qAICGFadUoe7A3G\nn4Xh\r\n=L0tf\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "6920809ccc8a97897b221a28cf28c47873852824",
  "homepage": "https://npmjs.com/package/libnpmaccess",
  "license": "ISC",
  "maintainers": [
    {
      "name": "zkat",
      "email": "npm@zkat.tech"
    }
  ],
  "name": "libnpmaccess",
  "optionalDependencies": {},
  "readme": "# libnpmaccess [![npm version](https://img.shields.io/npm/v/libnpmaccess.svg)](https://npm.im/libnpmaccess) [![license](https://img.shields.io/npm/l/libnpmaccess.svg)](https://npm.im/libnpmaccess) [![Travis](https://img.shields.io/travis/npm/libnpmaccess/latest.svg)](https://travis-ci.org/npm/libnpmaccess) [![AppVeyor](https://img.shields.io/appveyor/ci/zkat/libnpmaccess/latest.svg)](https://ci.appveyor.com/project/zkat/libnpmaccess) [![Coverage Status](https://coveralls.io/repos/github/npm/libnpmaccess/badge.svg?branch=latest)](https://coveralls.io/github/npm/libnpmaccess?branch=latest)\n\n[`libnpmaccess`](https://github.com/npm/libnpmaccess) is a Node.js\nlibrary that provides programmatic access to the guts of the npm CLI's `npm\naccess` command and its various subcommands. This includes managing account 2FA,\nlisting packages and permissions, looking at package collaborators, and defining\npackage permissions for users, orgs, and teams.\n\n## Example\n\n```javascript\nconst access = require('libnpmaccess')\n\n// List all packages @zkat has access to on the npm registry.\nconsole.log(Object.keys(await access.lsPackages('zkat')))\n```\n\n## Table of Contents\n\n* [Installing](#install)\n* [Example](#example)\n* [Contributing](#contributing)\n* [API](#api)\n  * [access opts](#opts)\n  * [`public()`](#public)\n  * [`restricted()`](#restricted)\n  * [`grant()`](#grant)\n  * [`revoke()`](#revoke)\n  * [`tfaRequired()`](#tfa-required)\n  * [`tfaNotRequired()`](#tfa-not-required)\n  * [`lsPackages()`](#ls-packages)\n  * [`lsPackages.stream()`](#ls-packages-stream)\n  * [`lsCollaborators()`](#ls-collaborators)\n  * [`lsCollaborators.stream()`](#ls-collaborators-stream)\n\n### Install\n\n`$ npm install libnpmaccess`\n\n### Contributing\n\nThe npm team enthusiastically welcomes contributions and project participation!\nThere's a bunch of things you can do if you want to contribute! The [Contributor\nGuide](CONTRIBUTING.md) has all the information you need for everything from\nreporting bugs to contributing entire new features. Please don't hesitate to\njump in if you'd like to, or even ask us questions if something isn't clear.\n\nAll participants and maintainers in this project are expected to follow [Code of\nConduct](CODE_OF_CONDUCT.md), and just generally be excellent to each other.\n\nPlease refer to the [Changelog](CHANGELOG.md) for project history details, too.\n\nHappy hacking!\n\n### API\n\n#### <a name=\"opts\"></a> `opts` for `libnpmaccess` commands\n\n`libnpmaccess` uses [`npm-registry-fetch`](https://npm.im/npm-registry-fetch).\nAll options are passed through directly to that library, so please refer to [its\nown `opts`\ndocumentation](https://www.npmjs.com/package/npm-registry-fetch#fetch-options)\nfor options that can be passed in.\n\nA couple of options of note for those in a hurry:\n\n* `opts.token` - can be passed in and will be used as the authentication token for the registry. For other ways to pass in auth details, see the n-r-f docs.\n* `opts.otp` - certain operations will require an OTP token to be passed in. If a `libnpmaccess` command fails with `err.code === EOTP`, please retry the request with `{otp: <2fa token>}`\n* `opts.Promise` - If you pass this in, the Promises returned by `libnpmaccess` commands will use this Promise class instead. For example: `{Promise: require('bluebird')}`\n\n#### <a name=\"public\"></a> `> access.public(spec, [opts]) -> Promise`\n\n`spec` must be an [`npm-package-arg`](https://npm.im/npm-package-arg)-compatible\nregistry spec.\n\nMakes package described by `spec` public.\n\n##### Example\n\n```javascript\nawait access.public('@foo/bar', {token: 'myregistrytoken'})\n// `@foo/bar` is now public\n```\n\n#### <a name=\"restricted\"></a> `> access.restricted(spec, [opts]) -> Promise`\n\n`spec` must be an [`npm-package-arg`](https://npm.im/npm-package-arg)-compatible\nregistry spec.\n\nMakes package described by `spec` private/restricted.\n\n##### Example\n\n```javascript\nawait access.restricted('@foo/bar', {token: 'myregistrytoken'})\n// `@foo/bar` is now private\n```\n\n#### <a name=\"grant\"></a> `> access.grant(spec, scope, team, permissions, [opts]) -> Promise`\n\n`spec` must be an [`npm-package-arg`](https://npm.im/npm-package-arg)-compatible\nregistry spec. `scope` must be a valid scope, with or without the `@` prefix,\nand `team` must be a valid team within that scope. `permissions` must be one of\n`'read-only'` or `'read-write'`.\n\nGrants `read-only` or `read-write` permissions for a certain package to a team.\n\n##### Example\n\n```javascript\nawait access.grant('@foo/bar', '@foo', 'myteam', 'read-write', {\n  token: 'myregistrytoken'\n})\n// `@foo/bar` is now read/write enabled for the @foo:myteam team.\n```\n\n#### <a name=\"revoke\"></a> `> access.revoke(spec, scope, team, [opts]) -> Promise`\n\n`spec` must be an [`npm-package-arg`](https://npm.im/npm-package-arg)-compatible\nregistry spec. `scope` must be a valid scope, with or without the `@` prefix,\nand `team` must be a valid team within that scope. `permissions` must be one of\n`'read-only'` or `'read-write'`.\n\nRemoves access to a package from a certain team.\n\n##### Example\n\n```javascript\nawait access.revoke('@foo/bar', '@foo', 'myteam', {\n  token: 'myregistrytoken'\n})\n// @foo:myteam can no longer access `@foo/bar`\n```\n\n#### <a name=\"tfa-required\"></a> `> access.tfaRequired(spec, [opts]) -> Promise`\n\n`spec` must be an [`npm-package-arg`](https://npm.im/npm-package-arg)-compatible\nregistry spec.\n\nMakes it so publishing or managing a package requires using 2FA tokens to\ncomplete operations.\n\n##### Example\n\n```javascript\nawait access.tfaRequires('lodash', {token: 'myregistrytoken'})\n// Publishing or changing dist-tags on `lodash` now require OTP to be enabled.\n```\n\n#### <a name=\"tfa-not-required\"></a> `> access.tfaNotRequired(spec, [opts]) -> Promise`\n\n`spec` must be an [`npm-package-arg`](https://npm.im/npm-package-arg)-compatible\nregistry spec.\n\nDisabled the package-level 2FA requirement for `spec`. Note that you will need\nto pass in an `otp` token in `opts` in order to complete this operation.\n\n##### Example\n\n```javascript\nawait access.tfaNotRequired('lodash', {otp: '123654', token: 'myregistrytoken'})\n// Publishing or editing dist-tags on `lodash` no longer requires OTP to be\n// enabled.\n```\n\n#### <a name=\"ls-packages\"></a> `> access.lsPackages(scope, [team], [opts]) -> Promise`\n\n`scope` must be a valid org or user name, with or without the `@` prefix. `team`\nis optional and, if provided, must be a valid team within that scope. `team`\nmust be `null` in order to pass in `opts`.\n\nLists out packages a user, org, or team has access to, with corresponding\npermissions. Packages that the access token does not have access to won't be\nlisted.\n\nFor a streamed version of these results, see [`access.lsPackages.stream()`](#ls-package-stream).\n\n##### Example\n\n```javascript\nawait access.lsPackages('zkat', null, {\n  token: 'myregistrytoken'\n})\n// Lists all packages `@zkat` has access to on the registry, and the\n// corresponding permissions.\n```\n\n#### <a name=\"ls-packages-stream\"></a> `> access.lsPackages.stream(scope, [team], [opts]) -> Stream`\n\n`scope` must be a valid org or user name, with or without the `@` prefix. `team`\nis optional and, if provided, must be a valid team within that scope. `team`\nmust be `null` in order to pass in `opts`.\n\nStreams out packages a user, org, or team has access to, with corresponding\npermissions, with each stream entry being formatted like `[packageName,\npermissions]`. Packages that the access token does not have access to won't be\nlisted.\n\nThe returned stream is a valid `asyncIterator`.\n\n##### Example\n\n```javascript\nfor await (let [pkg, perm] of access.lsPackages.stream('zkat')) {\n  console.log('zkat has', perm, 'access to', pkg)\n}\n// zkat has read-write access to eggplant\n// zkat has read-only access to @npmcorp/secret\n```\n\n#### <a name=\"ls-collaborators\"></a> `> access.lsCollaborators(spec, [user], [opts]) -> Promise`\n\n`spec` must be an [`npm-package-arg`](https://npm.im/npm-package-arg)-compatible\nregistry spec. `scope` must be a valid org or user name, with or without the `@`\nprefix. `team` is optional and, if provided, must be a valid team within that\nscope. `team` must be `null` in order to pass in `opts`.\n\nLists out access privileges for a certain package. Will only show permissions\nfor packages to which you have at least read access. If `user` is passed in, the\nlist is filtered only to teams _that_ user happens to belong to.\n\nFor a streamed version of these results, see [`access.lsCollaborators.stream()`](#ls-collaborators-stream).\n\n##### Example\n\n```javascript\nawait access.lsCollaborators('@npm/foo', 'zkat', {\n  token: 'myregistrytoken'\n})\n// Lists all teams with access to @npm/foo that @zkat belongs to.\n```\n\n#### <a name=\"ls-collaborators-stream\"></a> `> access.lsCollaborators.stream(spec, [user], [opts]) -> Stream`\n\n`spec` must be an [`npm-package-arg`](https://npm.im/npm-package-arg)-compatible\nregistry spec. `scope` must be a valid org or user name, with or without the `@`\nprefix. `team` is optional and, if provided, must be a valid team within that\nscope. `team` must be `null` in order to pass in `opts`.\n\nStream out access privileges for a certain package, with each entry in `[user,\npermissions]` format. Will only show permissions for packages to which you have\nat least read access. If `user` is passed in, the list is filtered only to teams\n_that_ user happens to belong to.\n\nThe returned stream is a valid `asyncIterator`.\n\n##### Example\n\n```javascript\nfor await (let [usr, perm] of access.lsCollaborators.stream('npm')) {\n  console.log(usr, 'has', perm, 'access to npm')\n}\n// zkat has read-write access to npm\n// iarna has read-write access to npm\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/libnpmaccess.git"
  },
  "scripts": {
    "postrelease": "npm publish && git push --follow-tags",
    "prerelease": "npm t",
    "pretest": "standard",
    "release": "standard-version -s",
    "test": "tap -J --100 test/*.js",
    "update-coc": "weallbehave -o . && git add CODE_OF_CONDUCT.md && git commit -m 'docs(coc): updated CODE_OF_CONDUCT.md'",
    "update-contrib": "weallcontribute -o . && git add CONTRIBUTING.md && git commit -m 'docs(contributing): updated CONTRIBUTING.md'"
  },
  "version": "2.0.1"
}
