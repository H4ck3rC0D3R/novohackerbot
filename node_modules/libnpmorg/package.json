{
  "_args": [
    [
      {
        "raw": "libnpmorg@^1.0.0",
        "scope": null,
        "escapedName": "libnpmorg",
        "name": "libnpmorg",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "D:\\Desktop\\NovoHackerBot\\node_modules\\libnpm"
    ]
  ],
  "_from": "libnpmorg@>=1.0.0 <2.0.0",
  "_id": "libnpmorg@1.0.0",
  "_inCache": true,
  "_location": "/libnpmorg",
  "_nodeVersion": "10.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/libnpmorg_1.0.0_1535068470616_0.5864554524881789"
  },
  "_npmUser": {
    "name": "zkat",
    "email": "npm@zkat.tech"
  },
  "_npmVersion": "6.4.1-next.0",
  "_phantomChildren": {
    "pump": "3.0.0"
  },
  "_requested": {
    "raw": "libnpmorg@^1.0.0",
    "scope": null,
    "escapedName": "libnpmorg",
    "name": "libnpmorg",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/libnpm"
  ],
  "_resolved": "https://registry.npmjs.org/libnpmorg/-/libnpmorg-1.0.0.tgz",
  "_shasum": "979b868c48ba28c5820e3bb9d9e73c883c16a232",
  "_shrinkwrap": null,
  "_spec": "libnpmorg@^1.0.0",
  "_where": "D:\\Desktop\\NovoHackerBot\\node_modules\\libnpm",
  "author": {
    "name": "Kat MarchÃ¡n",
    "email": "kzm@zkat.tech"
  },
  "bugs": {
    "url": "https://github.com/npm/libnpmorg/issues"
  },
  "dependencies": {
    "aproba": "^2.0.0",
    "figgy-pudding": "^3.4.1",
    "get-stream": "^4.0.0",
    "npm-registry-fetch": "^3.8.0"
  },
  "description": "Programmatic api for `npm org` commands",
  "devDependencies": {
    "nock": "^9.6.1",
    "standard": "*",
    "standard-version": "*",
    "tap": "*",
    "weallbehave": "*",
    "weallcontribute": "*"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-o+4eVJBoDGMgRwh2lJY0a8pRV2c/tQM/SxlqXezjcAg26Qe9jigYVs+Xk0vvlYDWCDhP0g74J8UwWeAgsB7gGw==",
    "shasum": "979b868c48ba28c5820e3bb9d9e73c883c16a232",
    "tarball": "https://registry.npmjs.org/libnpmorg/-/libnpmorg-1.0.0.tgz",
    "fileCount": 10,
    "unpackedSize": 42686,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbf0k3CRA9TVsSAnZWagAAX/gQAIk0cwi4JrM50IBiSrjC\n5dv+7tvf6HpBtThwOUxV8+VZQMFGJbbs+gCR1dcVmuvhgfJ9sEILr5jGddwn\ndos0okrxTY3lK1SfIjKWbDBFKG/xnkWw5Oa7adnnx7nW4JZEdTw7HmXTiFJX\nuS599AqvMN0XFulyFWMKLySoW0T9bk2s09+hiMTX8htW5C8lJosCgp13NHZK\n8TaGUMIBl/IUYHPPnD87SJ/r2V6GunMpTm9nLnpExcThws6vI6Ds0nV4fvNa\nL+BBjhAl2VxaF9IsXjJ53ayABAQkjvC+yruoZkBC+iuLvyIc7lZj4Kr62n0T\nwKOqhEbioiTYT3VVV4zPOrOwuSWgmHXtc8zXjgSU6ASHjkaYu7pruoNPVgi2\nB+TbwNGi0S2Lx5msENadhKfhWo/xbZifi+wZnKjN6/Hvgcp5Y2IhmuIK07by\nGBiR8ewJz35lWwHyvG2SFZRkvDAgIV6KYXsiF2XCYX/V1o19bINZft8Ksxrj\n+Ex/qUb+59Gc4ceCf27ynrg2z0GbcQDF0oBQc3yY60hHzWretxiUFVcLtndc\n1D3+dP62lRK/GcHs5xQwZ4ckL71Whj8zJmddKY1BVY87suFL/dLgo+l5y4tS\nUh6vdOg0RsDB2hGAPVnDDkxWyxWfCtuf973mK/PWqJSF4QowUvMeQRO1K2Eq\n70Xf\r\n=UPV2\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "af089a06b620db9b17da9fecd67c2268b6f93ea8",
  "homepage": "https://npmjs.com/package/libnpmorg",
  "keywords": [
    "libnpm",
    "npm",
    "package manager",
    "api",
    "orgs",
    "teams"
  ],
  "license": "ISC",
  "maintainers": [
    {
      "name": "zkat",
      "email": "npm@zkat.tech"
    }
  ],
  "name": "libnpmorg",
  "optionalDependencies": {},
  "readme": "# libnpmorg [![npm version](https://img.shields.io/npm/v/libnpmorg.svg)](https://npm.im/libnpmorg) [![license](https://img.shields.io/npm/l/libnpmorg.svg)](https://npm.im/libnpmorg) [![Travis](https://img.shields.io/travis/npm/libnpmorg.svg)](https://travis-ci.org/npm/libnpmorg) [![AppVeyor](https://ci.appveyor.com/api/projects/status/github/zkat/libnpmorg?svg=true)](https://ci.appveyor.com/project/zkat/libnpmorg) [![Coverage Status](https://coveralls.io/repos/github/npm/libnpmorg/badge.svg?branch=latest)](https://coveralls.io/github/npm/libnpmorg?branch=latest)\n\n[`libnpmorg`](https://github.com/npm/libnpmorg) is a Node.js library for\nprogrammatically accessing the [npm Org membership\nAPI](https://github.com/npm/registry/blob/master/docs/orgs/memberships.md#membership-detail).\n\n## Example\n\n```js\nconst org = require('libnpmorg')\n\nconsole.log(await org.ls('myorg', {token: 'deadbeef'}))\n=>\nRoster {\n  zkat: 'developer',\n  iarna: 'admin',\n  isaacs: 'owner'\n}\n```\n\n## Install\n\n`$ npm install libnpmorg`\n\n## Table of Contents\n\n* [Example](#example)\n* [Install](#install)\n* [API](#api)\n  * [hook opts](#opts)\n  * [`set()`](#set)\n  * [`rm()`](#rm)\n  * [`ls()`](#ls)\n  * [`ls.stream()`](#ls-stream)\n\n### API\n\n#### <a name=\"opts\"></a> `opts` for `libnpmorg` commands\n\n`libnpmorg` uses [`npm-registry-fetch`](https://npm.im/npm-registry-fetch).\nAll options are passed through directly to that library, so please refer to [its\nown `opts`\ndocumentation](https://www.npmjs.com/package/npm-registry-fetch#fetch-options)\nfor options that can be passed in.\n\nA couple of options of note for those in a hurry:\n\n* `opts.token` - can be passed in and will be used as the authentication token for the registry. For other ways to pass in auth details, see the n-r-f docs.\n* `opts.otp` - certain operations will require an OTP token to be passed in. If a `libnpmorg` command fails with `err.code === EOTP`, please retry the request with `{otp: <2fa token>}`\n* `opts.Promise` - If you pass this in, the Promises returned by `libnpmorg` commands will use this Promise class instead. For example: `{Promise: require('bluebird')}`\n\n#### <a name=\"set\"></a> `> org.set(org, user, [role], [opts]) -> Promise`\n\nThe returned Promise resolves to a [Membership\nDetail](https://github.com/npm/registry/blob/master/docs/orgs/memberships.md#membership-detail)\nobject.\n\nThe `role` is optional and should be one of `admin`, `owner`, or `developer`.\n`developer` is the default if no `role` is provided.\n\n`org` and `user` must be scope names for the org name and user name\nrespectively. They can optionally be prefixed with `@`.\n\nSee also: [`PUT\n/-/org/:scope/user`](https://github.com/npm/registry/blob/master/docs/orgs/memberships.md#org-membership-replace)\n\n##### Example\n\n```javascript\nawait org.set('@myorg', '@myuser', 'admin', {token: 'deadbeef'})\n=>\nMembershipDetail {\n  org: {\n    name: 'myorg',\n    size: 15\n  },\n  user: 'myuser',\n  role: 'admin'\n}\n```\n\n#### <a name=\"rm\"></a> `> org.rm(org, user, [opts]) -> Promise`\n\nThe Promise resolves to `null` on success.\n\n`org` and `user` must be scope names for the org name and user name\nrespectively. They can optionally be prefixed with `@`.\n\nSee also: [`DELETE\n/-/org/:scope/user`](https://github.com/npm/registry/blob/master/docs/orgs/memberships.md#org-membership-delete)\n\n##### Example\n\n```javascript\nawait org.rm('myorg', 'myuser', {token: 'deadbeef'})\n```\n\n#### <a name=\"ls\"></a> `> org.ls(org, [opts]) -> Promise`\n\nThe Promise resolves to a\n[Roster](https://github.com/npm/registry/blob/master/docs/orgs/memberships.md#roster)\nobject.\n\n`org` must be a scope name for an org, and can be optionally prefixed with `@`.\n\nSee also: [`GET\n/-/org/:scope/user`](https://github.com/npm/registry/blob/master/docs/orgs/memberships.md#org-roster)\n\n##### Example\n\n```javascript\nawait org.ls('myorg', {token: 'deadbeef'})\n=>\nRoster {\n  zkat: 'developer',\n  iarna: 'admin',\n  isaacs: 'owner'\n}\n```\n\n#### <a name=\"ls-stream\"></a> `> org.ls.stream(org, [opts]) -> Stream`\n\nReturns a stream of entries for a\n[Roster](https://github.com/npm/registry/blob/master/docs/orgs/memberships.md#roster),\nwith each emitted entry in `[key, value]` format.\n\n`org` must be a scope name for an org, and can be optionally prefixed with `@`.\n\nThe returned stream is a valid `Symbol.asyncIterator`.\n\nSee also: [`GET\n/-/org/:scope/user`](https://github.com/npm/registry/blob/master/docs/orgs/memberships.md#org-roster)\n\n##### Example\n\n```javascript\nfor await (let [user, role] of org.ls.stream('myorg', {token: 'deadbeef'})) {\n  console.log(`user: ${user} (${role})`)\n}\n=>\nuser: zkat (developer)\nuser: iarna (admin)\nuser: isaacs (owner)\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/libnpmorg.git"
  },
  "scripts": {
    "postrelease": "npm publish && git push --follow-tags",
    "prerelease": "npm t",
    "pretest": "standard",
    "release": "standard-version -s",
    "test": "tap -J --100 test/*.js",
    "update-coc": "weallbehave -o . && git add CODE_OF_CONDUCT.md && git commit -m 'docs(coc): updated CODE_OF_CONDUCT.md'",
    "update-contrib": "weallcontribute -o . && git add CONTRIBUTING.md && git commit -m 'docs(contributing): updated CONTRIBUTING.md'"
  },
  "version": "1.0.0"
}
